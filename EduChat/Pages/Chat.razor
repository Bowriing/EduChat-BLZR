@page "/chat"
@using EduChat.Services;
@inject NavigationManager NavigationManager
@inject UserService UserService
<link href="css/chat.css" rel="stylesheet" />

<div class="chat-container">
    <h2>Chat</h2>
    @if (UserService.LoggedInUser.Id.HasValue && !string.IsNullOrEmpty(UserService.LoggedInUser.Name))
    {
        <div class="messages-container">
            @foreach (var message in messages)
            {
                <p class="message">@message</p>
            }
        </div>
        <div class="input-group">
            <input @bind="inputMessage" class="form-control" placeholder="Type your message..." />
            <div class="input-group-append">
                <button @onclick="SendMessage" class="btn btn-primary">Send</button>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            Only logged-in users can use the chat. Please log in to join the conversation.
        </div>
    }
</div>

@code {
    [Inject] private ChatService ChatService { get; set; }
    [Inject] private UserService UserSvc { get; set; }
    [Parameter] public int GroupId { get; set; }
    private string inputMessage = "";
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        string hubUrl = NavigationManager.BaseUri.TrimEnd('/') + "/chatHub";
        await ChatService.ConnectAsync(hubUrl);
        ChatService.OnMessageReceived(async (user, message) =>
    {
        await InvokeAsync(() =>
    {
        messages.Add($"{user}: {message}");
        StateHasChanged();
    });
    });
        var dbMessages = await ChatService.GetMessagesForGroupAsync(GroupId);
        foreach (var msg in dbMessages)
        {
            messages.Add($"{msg.UserName}: {msg.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(inputMessage) && UserService.LoggedInUser.Id.HasValue && !string.IsNullOrEmpty(UserService.LoggedInUser.Name))
        {
            await ChatService.SendMessageAsync(GroupId, UserService.LoggedInUser.Id.Value, UserService.LoggedInUser.Name, inputMessage);
            inputMessage = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ChatService.DisconnectAsync();
    }
    
}
