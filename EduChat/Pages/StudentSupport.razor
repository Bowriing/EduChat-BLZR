@page "/studentsupport"
@using MySql.Data.MySqlClient
@inject MySqlConnection Connection
@inject IConfiguration Configuration
@using EduChat.Models

<link href="StudentSupport.css" rel="stylesheet" />

<h3>Student Support</h3>


<label>Document Language:</label>
<select @bind="DocumentLanguage">
    <option value="">Select a language</option>
    @foreach (var language in Languages)
    {
        <option value="@language.Key">@language.Value</option>
    }
</select>
<br />
<label>Requested Language:</label>
<select @bind="RequestedLanguage">
    <option value="">Select a language</option>
    @foreach (var language in Languages)
    {
        <option value="@language.Key">@language.Value</option>
    }
</select>

<h4>Translation Request</h4>
<label>Document Language:</label>
<input @bind-value="DocumentLanguage" type="text" />
<br />
<label>Requested Language:</label>
<input @bind-value="RequestedLanguage" type="text" />
<br />
<label>Document File:</label>
<input @onchange="OnFileUpload" type="file" accept=".doc,.docx" />
<br />
<button @onclick="SubmitTranslationRequest">Add Request</button>

<h4>Translation Services</h4>
<label>Languages:</label>
<input @bind-value="Languages" type="text" />
<br />
<label>Availability:</label>
<input @bind-value="Availability" type="text" />
<br />
<label>Rates:</label>
<input @bind-value="Rates" type="text" />
<br />
<button @onclick="SubmitTranslationService">Add Service</button>

@code {
    private string DocumentLanguage { get; set; }
    private string RequestedLanguage { get; set; }
    private byte[] DocumentFileContent { get; set; }

    private string Languages { get; set; }
    private string Availability { get; set; }
    private string Rates { get; set; }

    //private string ConnectionString => Configuration.GetConnectionString("MySqlConnection");


    private Dictionary<int, string> Language { get; set; } = new Dictionary<int, string>();

    private async Task LoadLanguages()
    {
        try
        {
            await Connection.OpenAsync();

            using var command = new MySqlCommand("SELECT id, name FROM languages");
            command.Connection = Connection;

            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                int id = reader.GetInt32("id");
                string name = reader.GetString("name");
                Languages.Add(id, name);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadLanguages();
    } 



    private async Task OnFileUpload(ChangeEventArgs e)
    {
        var file = e.Value as IBrowserFile;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            DocumentFileContent = memoryStream.ToArray();
        }
    }

    private async Task SubmitTranslationRequest()
    {

        try
        {
            await Connection.OpenAsync();
            MySqlCommand command = new MySqlCommand("INSERT INTO Translation_Requests (document_language_id, requested_language_id, user_id, document_file) VALUES (@documentLanguage, @requestedLanguage, @userId, @documentFile)");


            command.Parameters.AddWithValue("@documentLanguage", DocumentLanguage);
            command.Parameters.AddWithValue("@requestedLanguage", RequestedLanguage);
            command.Parameters.AddWithValue("@userId", 1); // Replace this with the actual user ID
            command.Parameters.AddWithValue("@documentFile", DocumentFileContent);
            command.Connection = Connection;

            await command.ExecuteNonQueryAsync();
        }
        catch(Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }

    }

    private async Task SubmitTranslationService()
    {
        try
        {
            await Connection.OpenAsync();

            using var command = new MySqlCommand("INSERT INTO Translation_Services (language_id, availability, rates, user_id) VALUES (@language, @availability, @rates, @userId)");
            command.Parameters.AddWithValue("@language", Languages);
            command.Parameters.AddWithValue("@availability", Availability);
            command.Parameters.AddWithValue("@rates", Rates);
            command.Parameters.AddWithValue("@userId", 1); // Replace this with the actual user ID
            command.Connection = Connection;

            await command.ExecuteNonQueryAsync();
        }
        catch(Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }

    }
}

