@page "/groupdetails/{GroupId:int}"
@using EduChat.Services;
@using MySql.Data.MySqlClient;
@using System.Data;
@inject MySqlConnection Connection
@using static EduChat.Pages.GroupList;
@inject UserService UserService
@inject NavigationManager NavigationManager



<h3>Group Details</h3>

@if (SelectedGroup == null)
{
    <p>Loading...</p>
}
else
{
    <ul class="nav nav-tabs" id="groupDetailsTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="nav-link active" id="groupInfo-tab" data-bs-toggle="tab" href="#groupInfo" role="tab" aria-controls="groupInfo" aria-selected="true">Group Info</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="groupChat-tab" data-bs-toggle="tab" href="#groupChat" role="tab" aria-controls="groupChat" aria-selected="false">Group Chat</a>
        </li>
    </ul>
    <div class="tab-content" id="groupDetailsTabsContent">
        <div class="tab-pane fade show active" id="groupInfo" role="tabpanel" aria-labelledby="groupInfo-tab">
           
            <div class="card">
                <div class="card-header">
                    <h3>@SelectedGroup.GroupName</h3>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">Language:</dt>
                        <dd class="col-sm-9">@SelectedGroup.LanguageName</dd>

                        <dt class="col-sm-3">Goal:</dt>
                        <dd class="col-sm-9">@SelectedGroup.Goal</dd>
                        <div class="mt-3">
                            <h5>Meetings</h5>
                            <div class="row">
                                <div class="col">
                                    <h6>Location:</h6>
                                    <input type="text" class="form-control" @bind="NewMeetingLocation" />
                                </div>
                                <div class="col">
                                    <h6>Meeting Date and Time:</h6>
                                    <input type="datetime-local" class="form-control" @bind="NewMeetingDateTime" />
                                </div>
                                <div class="col">
                                    <h6>End Time:</h6>
                                    <input type="datetime-local" class="form-control" @bind="NewMeetingEndTime" />
                                </div>
                                <div class="text-danger">@ErrorMessage</div>
                                <div class="col align-self-end">
                                    <button type="button" class="btn btn-primary btn-sm mt-2" @onclick="AddNewMeeting">Add Meeting</button>
                                </div>
                            </div>
                            <ul class="list-group mt-2">
                                @foreach (var meeting in SelectedGroup.Meetings)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div class="d-flex align-items-center">
                                            @meeting.MeetingDate.ToString("g") - @meeting.EndTime.ToShortTimeString() @meeting.Location
                                            <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteMeeting(meeting.Id)">Delete</button>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="mt-3">
                            <h5>Group Members</h5>
                            @if (UserService.LoggedInUser != null && !string.IsNullOrEmpty(UserService.LoggedInUser.Name))
                            {
                                @if (IsUserMemberOfGroup())
                                {
                                    <div>
                                        <span class="text-muted">You are part of that group.</span>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="AddUserToGroup">Join Study Group</button>
                                    </div>
                                }
                            }
                            else
                            {
                                <div>
                                    <span class="text-muted">You need to log in to join the group.</span>
                                </div>
                            }

                            <ul class="list-group mt-2">
                                @if (GroupMembers.Count == 0)
                                {
                                    <li class="list-group-item">No members in this group yet.</li>
                                }
                                else
                                {
                                    @foreach (var member in GroupMembers)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                @member.Name
                                                @if(UserService.LoggedInUser != null)
                                                @if (UserService.LoggedInUser.Id == member.Id)
                                                {
                                                    <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="() => RemoveUserFromGroup(member.Id)">Leave Group</button>
                                                }
                                            </div>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </dl>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="groupChat" role="tabpanel" aria-labelledby="groupChat-tab">
            <Chat GroupId="@SelectedGroup.Id"></Chat>
        </div>
    </div>

}
    


@code {
    [Parameter] public int GroupId { get; set; }

    private StudyGroup SelectedGroup { get; set; }

    private List<User> GroupMembers { get; set; } = new List<User>();
    private string NewMeetingLocation { get; set; }
    private DateTime NewMeetingDateTime { get; set; } = DateTime.Now;
    private DateTime NewMeetingEndTime { get; set; } = DateTime.Now;
    private string ErrorMessage { get; set; }
    public class StudyGroup
    {
        public int Id { get; set; }
        public string GroupName { get; set; }
        public string LanguageName { get; set; }
        public string Goal { get; set; }
        public List<Meeting> Meetings { get; set; } = new List<Meeting>();
    }
    public class Meeting
    {
        public int Id { get; set; }
        public int StudyGroupId { get; set; }
        public DateTime MeetingDate { get; set; }
        public DateTime EndTime { get; set; }
        public string Location { get; set; }
    }
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }

    }

    protected override async Task OnInitializedAsync()
    {
        await DeletePastMeetings();
        await LoadGroupDetails();
        await LoadGroupMembers();
    }

    private async Task LoadGroupDetails()
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("SELECT sg.id, sg.name as group_name, l.name as language_name, sg.goal FROM study_groups sg INNER JOIN languages l ON sg.language_id = l.id WHERE sg.id = @groupId");
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Connection = Connection;
            using var reader = await cmd.ExecuteReaderAsync();
            if (reader.Read())
            {
                SelectedGroup = new StudyGroup
                    {
                        Id = reader.GetInt32(0),
                        GroupName = reader.GetString(1),
                        LanguageName = reader.GetString(2),
                        Goal = reader.GetString(3)
                    };
            }
            await reader.CloseAsync();

            // New query to get meetings for the group
            cmd = new MySqlCommand("SELECT id, study_group_id, meeting_date, end_time, location  FROM meetings WHERE study_group_id = @groupId");
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Connection = Connection;
            using var meetingReader = await cmd.ExecuteReaderAsync();
            while (meetingReader.Read())
            {
                SelectedGroup.Meetings.Add(new Meeting
                    {
                        Id = meetingReader.GetInt32(0),
                        StudyGroupId = meetingReader.GetInt32(1),
                        MeetingDate = meetingReader.GetDateTime(2),
                        EndTime = meetingReader.GetDateTime(3),
                        Location = meetingReader.GetString(4)
                    });
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {


            await Connection.CloseAsync();

        }
    }



    private async Task LoadGroupMembers()
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("SELECT u.id, u.name FROM study_group_members sgm INNER JOIN users u ON sgm.user_id = u.id WHERE sgm.study_group_id = @groupId");
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Connection = Connection;
            using var reader = await cmd.ExecuteReaderAsync();
            while (reader.Read())
            {
                GroupMembers.Add(new User
                    {
                        Id = reader.GetInt32(0),
                        Name = reader.GetString(1)
                    });
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }
    //private async Task UpdateGroupDetails()
    //{
    //    try
    //    {
    //        await Connection.OpenAsync();

    //        MySqlCommand cmd = new MySqlCommand("UPDATE study_groups SET location = @location, meeting_time = @meetingTime WHERE id = @groupId");
    //        cmd.Parameters.AddWithValue("@location", SelectedGroup.Location);
    //        cmd.Parameters.AddWithValue("@meetingTime", SelectedGroup.MeetingTime);
    //        cmd.Parameters.AddWithValue("@groupId", GroupId);
    //        cmd.Connection = Connection;

    //        await cmd.ExecuteNonQueryAsync();
    //    }
    //    catch (Exception ex)
    //    {
    //        // Handle the exception
    //    }
    //    finally
    //    {


    //            await Connection.CloseAsync();
    //        NavigationManager.NavigateTo($"/groupdetails/{GroupId}", forceLoad: true);
    //    }
    //}

    private async Task AddUserToGroup()
    {
        if (UserService.LoggedInUser.Id == null)
        {
            return;
        }

        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("INSERT INTO study_group_members (user_id, study_group_id) VALUES (@user_id, @study_group_id)");
            cmd.Parameters.AddWithValue("@user_id", UserService.LoggedInUser.Id);
            cmd.Parameters.AddWithValue("@study_group_id", GroupId);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
            NavigationManager.NavigateTo($"/groupdetails/{GroupId}", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }
    private async Task RemoveUserFromGroup(int memberId)
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("DELETE FROM study_group_members WHERE user_id = @user_id AND study_group_id = @group_id");
            cmd.Parameters.AddWithValue("@user_id", memberId);
            cmd.Parameters.AddWithValue("@group_id", GroupId);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
            NavigationManager.NavigateTo($"/groupdetails/{GroupId}", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }

    private bool IsUserMemberOfGroup()
    {
        return GroupMembers.Any(member => member.Id == UserService.LoggedInUser.Id);
    }

    private async Task AddNewMeeting()
    {
        // Check if the start date is later than the end date
        if (NewMeetingDateTime >= NewMeetingEndTime)
        {
            ErrorMessage = "The start date and time must be earlier than the end date and time.";
            return;
        }
        if (UserService.LoggedInUser == null )
        {
            ErrorMessage = "You need to be loged user to add mettings";
            return;
        }
        ErrorMessage = string.Empty; // Reset the error message
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("INSERT INTO meetings (study_group_id, meeting_date, end_time, location) VALUES (@study_group_id, @meeting_date, @end_time, @location)");
            cmd.Parameters.AddWithValue("@study_group_id", GroupId);
            cmd.Parameters.AddWithValue("@meeting_date", NewMeetingDateTime);
            cmd.Parameters.AddWithValue("@end_time", NewMeetingEndTime); // Add this line
            cmd.Parameters.AddWithValue("@location", NewMeetingLocation);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
            await LoadGroupDetails();
        }
    }
    private async Task DeleteMeeting(int meetingId)
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("DELETE FROM meetings WHERE id = @meeting_id");
            cmd.Parameters.AddWithValue("@meeting_id", meetingId);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
            await LoadGroupDetails();
        }
    }
    private async Task DeletePastMeetings()
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("DELETE FROM meetings WHERE study_group_id = @groupId AND end_time < @currentTime");
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Parameters.AddWithValue("@currentTime", DateTime.Now); // Delete meetings with end times earlier than the current time
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }

}
