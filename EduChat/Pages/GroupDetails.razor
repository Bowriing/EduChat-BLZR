@page "/groupdetails/{GroupId:int}"
@using EduChat.Services;
@using MySql.Data.MySqlClient;
@using System.Data;
@inject MySqlConnection Connection
@using static EduChat.Pages.GroupList;
@inject UserService UserService
@inject NavigationManager NavigationManager



<h3>Group Details</h3>

@if (SelectedGroup == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card">
        <div class="card-header">
            <h3>@SelectedGroup.GroupName</h3>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Language:</dt>
                <dd class="col-sm-9">@SelectedGroup.LanguageName</dd>

                <dt class="col-sm-3">Goal:</dt>
                <dd class="col-sm-9">@SelectedGroup.Goal</dd>
                <div class="row">
                    <div class="col">
                        <h6>Location:</h6>
                        <input type="text" class="form-control" @bind="SelectedGroup.Location" />
                    </div>
                    <div class="col">
                        <h6>Meeting Time:</h6>
                        <input type="datetime-local" class="form-control" @bind="SelectedGroup.MeetingTime" />
                    </div>
                    <div class="col align-self-end">
                        <button type="button" class="btn btn-primary btn-sm mt-2" @onclick="UpdateGroupDetails">Save Changes</button>
                    </div>
                </div>
                <div class="mt-3">
                    <h5>Group Members</h5>
                    @if (!string.IsNullOrEmpty(UserService.UserName))
                    {
                        @if (IsUserMemberOfGroup())
                        {
                            <div>
                                <span class="text-muted">You are part of that group.</span>
                            </div>
                        }
                        else
                        {
                            <div>
                                <button type="button" class="btn btn-primary btn-sm" @onclick="AddUserToGroup">Join Study Group</button>
                            </div>
                        }
                    }
                    else
                    {
                        <div>
                            <span class="text-muted">You need to log in to join the group.</span>
                        </div>
                    }

                    <ul class="list-group mt-2">
                        @if (GroupMembers.Count == 0)
                        {
                            <li class="list-group-item">No members in this group yet.</li>
                        }
                        else
                        {
                            @foreach (var member in GroupMembers)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div class="d-flex align-items-center">
                                        @member.Name
                                        @if (UserService.UserId == member.Id)
                                        {
                                            <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="() => RemoveUserFromGroup(member.Id)">Leave Group</button>
                                        }
                                    </div>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </dl>
        </div>
    </div>
}
    


@code {
    [Parameter] public int GroupId { get; set; }

    private StudyGroup SelectedGroup { get; set; }

    private List<User> GroupMembers { get; set; } = new List<User>();

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadGroupDetails();
        await LoadGroupMembers();
    }

    private async Task LoadGroupDetails()
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("SELECT sg.id, sg.name as group_name, l.name as language_name, sg.location, sg.meeting_time,sg.goal FROM study_groups sg INNER JOIN languages l ON sg.language_id = l.id WHERE sg.id = @groupId");
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Connection = Connection;
            using var reader = await cmd.ExecuteReaderAsync();
            if (reader.Read())
            {
                SelectedGroup = new StudyGroup
                    {
                        Id = reader.GetInt32(0),
                        GroupName = reader.GetString(1),
                        LanguageName = reader.GetString(2),
             
                        Location = reader.IsDBNull(reader.GetOrdinal("location")) ? "" : reader.GetString("location"),
                        MeetingTime = reader.IsDBNull(reader.GetOrdinal("meeting_time")) ? DateTime.MinValue : reader.GetDateTime("meeting_time"),
                        Goal = reader.GetString(5)
                    };
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
          
            
                await Connection.CloseAsync();
            
        }
    }



    private async Task LoadGroupMembers()
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("SELECT u.id, u.name FROM study_group_members sgm INNER JOIN users u ON sgm.user_id = u.id WHERE sgm.study_group_id = @groupId");
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Connection = Connection;
            using var reader = await cmd.ExecuteReaderAsync();
            while (reader.Read())
            {
                GroupMembers.Add(new User
                    {
                        Id = reader.GetInt32(0),
                        Name = reader.GetString(1)
                    });
            }
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }
    private async Task UpdateGroupDetails()
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("UPDATE study_groups SET location = @location, meeting_time = @meetingTime WHERE id = @groupId");
            cmd.Parameters.AddWithValue("@location", SelectedGroup.Location);
            cmd.Parameters.AddWithValue("@meetingTime", SelectedGroup.MeetingTime);
            cmd.Parameters.AddWithValue("@groupId", GroupId);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
           
            
                await Connection.CloseAsync();
            NavigationManager.NavigateTo($"/groupdetails/{GroupId}", forceLoad: true);
        }
    }

    private async Task AddUserToGroup()
    {
        if (UserService.UserId == null)
        {
            return;
        }

        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("INSERT INTO study_group_members (user_id, study_group_id) VALUES (@user_id, @study_group_id)");
            cmd.Parameters.AddWithValue("@user_id", UserService.UserId);
            cmd.Parameters.AddWithValue("@study_group_id", GroupId);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
            NavigationManager.NavigateTo($"/groupdetails/{GroupId}", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }
    private async Task RemoveUserFromGroup(int memberId)
    {
        try
        {
            await Connection.OpenAsync();

            MySqlCommand cmd = new MySqlCommand("DELETE FROM study_group_members WHERE user_id = @user_id AND study_group_id = @group_id");
            cmd.Parameters.AddWithValue("@user_id", memberId);
            cmd.Parameters.AddWithValue("@group_id", GroupId);
            cmd.Connection = Connection;

            await cmd.ExecuteNonQueryAsync();
            NavigationManager.NavigateTo($"/groupdetails/{GroupId}", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Handle the exception
        }
        finally
        {
            await Connection.CloseAsync();
        }
    }

    private bool IsUserMemberOfGroup()
    {
        return GroupMembers.Any(member => member.Id == UserService.UserId);
    }

}
